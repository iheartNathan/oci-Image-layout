name: OCI Image Layout / Supply Chain Artifacts Workflow

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch: 

# env:
#   REGISTRY: ghcr.io
#   REPO: net-monitor


jobs:
  build-and-scan:
    permissions:
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
    #   - name: Extract metadata (tags, labels) for Docker
    #     id: meta
    #     uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7 # v5.7.0
    #     with:
    #       images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build Docker Image as OCI Layout
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: Dockerfile
          outputs: type=oci,dest=output.tar
          tags: edinburgh:v1
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Upload OCI image archive
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
            name: oci-image-archive
            path: output.tar
        
      
      - name: Extract OCI image layout
        run: |
          mkdir edinburgh
          tar -xf output.tar -C edinburgh
          ls -lha edinburgh
          ls -lha edinburgh/blobs/sha256
          cat edinburgh/index.json | jq


    #   - name: Login to GitHub Container Registry
    #     uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
    #     with:
    #       registry: ${{ env.REGISTRY }}
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Run Trivy vulnerability scan (JSON)
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2  # v0.28.0
        with:
          input: edinburgh:v1
          format: json
          output: trivy-vulnerability-scan.json

      - name: Upload vulnerability scan
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: trivy-vulnerability-scan-json
          path: trivy-vulnerability-scan.json
      
  sbom:
    needs: build-and-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [spdx-json, cyclonedx]

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download OCI image archive
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
            name: oci-image-archive
        
      - name: Extract OCI image layout
        run: |
          mkdir edinburgh
          tar -xf output.tar -C edinburgh
          ls -lha edinburgh
          ls -lha edinburgh/blobs/sha256
          cat edinburgh/index.json | jq

      - name: Generate SBOM using Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          input: edinburgh:v1
          format: ${{ matrix.format }}
          output: image-sbom-${{ matrix.format }}.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: ${{ matrix.format }}-sbom
          path: image-sbom-${{ matrix.format }}.json
  
  

  attach-sign-and-verify-artifacts:
    needs: [build-and-scan, sbom]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download OCI image archive
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: oci-image-archive
      
      - name: Download Trivy scan
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: trivy-vulnerability-scan-json

      - name: Download SPDX SBOM
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: spdx-json-sbom

      - name: Download CycloneDX SBOM
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: cyclonedx-sbom

      - name: Extract OCI image layout
        run: |
            mkdir edinburgh
            tar -xf output.tar -C edinburgh
            ls -lha edinburgh
            ls -lha edinburgh/blobs/sha256
            cat edinburgh/index.json | jq
            ls 

      - name: Install ORAS CLI
        uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d # v1.2.2

      - name: Attach the SBOMs and Vulnerability Scan to the OCI image layout 
        run: |
          IMAGE_INDEX_DIGEST=$(jq -r '
            .manifests[]
            | select(.annotations["org.opencontainers.image.ref.name"] == "v1")
            | .digest
          ' edinburgh/index.json)

          echo "$IMAGE_INDEX_DIGEST"
          oras discover --oci-layout edinburgh@$IMAGE_INDEX_DIGEST

          oras attach --distribution-spec v1.1-referrers-api \
            --oci-layout edinburgh@$IMAGE_INDEX_DIGEST \
            --artifact-type sbom/spdx \
            ./image-sbom-spdx-json.json:application/spdx+json

          oras attach --distribution-spec v1.1-referrers-api \
            --oci-layout edinburgh@$IMAGE_INDEX_DIGEST \
            --artifact-type sbom/cyclonedx \
            ./image-sbom-cyclonedx.json:application/cyclonedx+json
          
          oras attach --distribution-spec v1.1-referrers-api \
            --oci-layout edinburgh@$IMAGE_INDEX_DIGEST \
            --artifact-type trivy/scan \
            ./trivy-vulnerability-scan.json:application/vulnerability.scan+json
          
          
          oras discover --oci-layout edinburgh@$IMAGE_INDEX_DIGEST
          cat edinburgh/index.json | jq

          SPDX_DIGEST=$(jq -r '
            .manifests[]
            | select(.artifactType == "sbom/spdx")
            | .digest
          ' edinburgh/index.json)

          CYCLONEDX_DIGEST=$(jq -r '
            .manifests[]
            | select(.artifactType == "sbom/cyclonedx")
            | .digest
          ' edinburgh/index.json)

          TRIVYSCAN_DIGEST=$(jq -r '
            .manifests[]
            | select(.artifactType == "trivy/scan") 
            | .digest
          ' edinburgh/index.json)
          

          echo "IMAGE_INDEX_DIGEST=$IMAGE_INDEX_DIGEST" >> $GITHUB_ENV
          echo "SPDX_DIGEST=$SPDX_DIGEST" >> $GITHUB_ENV
          echo "CYCLONEDX_DIGEST=$CYCLONEDX_DIGEST" >> $GITHUB_ENV
          echo "TRIVYSCAN_DIGEST=$TRIVYSCAN_DIGEST" >> $GITHUB_ENV


      - name: Install Notation CLI
        uses: notaryproject/notation-action/setup@b6fee73110795d6793253c673bd723f12bcf9bbb # v1.2.2
        with:
            version: "1.3.1"    
      
      - name: Generate Self-Signed Certificate
        run: |
            notation cert generate-test test-env.io --default
            notation cert show --type ca --store test-env.io test-env.io.crt
      
      - name: Upload Public Certificate as Artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: test-env-public-cert
          path: /home/runner/.config/notation/localkeys/test-env.io.crt
      
      - name: Create a Trust Policy
        run: |
            notation policy import trustpolicy.json
            notation policy show

      - name: Sign OCI image layout
        run: |
          export NOTATION_EXPERIMENTAL=1
          notation sign --oci-layout edinburgh@$IMAGE_INDEX_DIGEST --signature-format cose
          notation sign --oci-layout edinburgh@$SPDX_DIGEST --signature-format cose
          notation sign --oci-layout edinburgh@$CYCLONEDX_DIGEST --signature-format cose
          notation sign --oci-layout edinburgh@$TRIVYSCAN_DIGEST --signature-format cose
          oras discover --oci-layout edinburgh@$IMAGE_INDEX_DIGEST

      

      # - name: Install ORAS CLI
      #   uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d
      
      # # - name: Push the OCI Image Layout to GHCR using ORAS
      # #   run: |
      # #     oras discover ${{ steps.meta.outputs.tags }}
      # #     oras cp --from-oci-layout -r net-monitor:main  ${{ steps.meta.outputs.tags }}
      # #     oras discover ${{ steps.meta.outputs.tags }}
          
      
      # # - name: Verify image as an OCI Image Layout
      # #   run: |
      # #     export NOTATION_EXPERIMENTAL=1
      # #     notation verify ${{ steps.meta.outputs.tags }} -v

